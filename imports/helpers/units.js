/**
 * Copyright 2025 Perfana Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const units = [
  { name: '', id: 'none', format: '' },
  { name: '', id: 'short', format: '' },
  { name: '%', id: 'percent', format: '%' },
  { name: 'Percent (0.0-1.0)', id: 'percentunit', format: '%' },
  { name: 'Humidity (%H)', id: 'humidity', format: '%H' },
  { name: 'Decibel', id: 'dB', format: 'dB' },
  { name: 'Meters/sec²', id: 'accMS2', format: 'm/sec²' },
  { name: 'Feet/sec²', id: 'accFS2', format: 'f/sec²' },
  { name: 'G unit', id: 'accG', format: 'g' },
  { name: 'FLOP/s', id: 'flops', format: 'FLOPS' },
  { name: 'MFLOP/s', id: 'mflops', format: 'FLOPS' },
  { name: 'GFLOP/s', id: 'gflops', format: 'FLOPS' },
  { name: 'TFLOP/s', id: 'tflops', format: 'FLOPS' },
  { name: 'PFLOP/s', id: 'pflops', format: 'FLOPS' },
  { name: 'EFLOP/s', id: 'eflops', format: 'FLOPS' },
  { name: 'ZFLOP/s', id: 'zflops', format: 'FLOPS' },
  { name: 'YFLOP/s', id: 'yflops', format: 'FLOPS' },
  { name: 'bytes(IEC)', id: 'bytes', format: 'B' },
  { name: 'bytes(SI)', id: 'decbytes', format: 'B' },
  { name: 'bits(IEC)', id: 'bits', format: 'b' },
  { name: 'bits(SI)', id: 'decbits', format: 'b' },
  { name: 'kibibytes', id: 'kbytes', format: 'KiB' },
  { name: 'kilobytes', id: 'deckbytes', format: 'KB' },
  { name: 'mebibytes', id: 'mbytes', format: 'MiB' },
  { name: 'megabytes', id: 'decmbytes', format: 'MB' },
  { name: 'gibibytes', id: 'gbytes', format: 'GiB' },
  { name: 'gigabytes', id: 'decgbytes', format: 'GB' },
  { name: 'tebibytes', id: 'tbytes', format: 'TiB' },
  { name: 'terabytes', id: 'dectbytes', format: 'TB' },
  { name: 'pebibytes', id: 'pbytes', format: 'PiB' },
  { name: 'petabytes', id: 'decpbytes', format: 'PB' },
  { name: 'packets/sec', id: 'pps', format: 'p/s' },
  { name: 'bytes/sec(IEC)', id: 'binBps', format: 'B/s' },
  { name: 'bytes/sec(SI)', id: 'Bps', format: 'B/s' },
  { name: 'bits/sec(IEC)', id: 'binbps', format: 'b/s' },
  { name: 'bits/sec(SI)', id: 'bps', format: 'b/s' },
  { name: 'kibibytes/sec', id: 'KiBs', format: 'KiB/s' },
  { name: 'kibibits/sec', id: 'Kibits', format: 'Kib/s' },
  { name: 'kilobytes/sec', id: 'KBs', format: 'KB/s' },
  { name: 'kilobits/sec', id: 'Kbits', format: 'Kb/s' },
  { name: 'mibibytes/sec', id: 'MiBs', format: 'MiB/s' },
  { name: 'mibibits/sec', id: 'Mibits', format: 'Mib/s' },
  { name: 'megabytes/sec', id: 'MBs', format: 'MB/s' },
  { name: 'megabits/sec', id: 'Mbits', format: 'Mb/s' },
  { name: 'gibibytes/sec', id: 'GiBs', format: 'GiB/s' },
  { name: 'gibibits/sec', id: 'Gibits', format: 'Gib/s' },
  { name: 'gigabytes/sec', id: 'GBs', format: 'GB/s' },
  { name: 'gigabits/sec', id: 'Gbits', format: 'Gb/s' },
  { name: 'tebibytes/sec', id: 'TiBs', format: 'TiB/s' },
  { name: 'tebibits/sec', id: 'Tibits', format: 'Tib/s' },
  { name: 'terabytes/sec', id: 'TBs', format: 'TB/s' },
  { name: 'terabits/sec', id: 'Tbits', format: 'Tb/s' },
  { name: 'petibytes/sec', id: 'PiBs', format: 'TiB/s' },
  { name: 'petibits/sec', id: 'Pibits', format: 'Tib/s' },
  { name: 'petabytes/sec', id: 'PBs', format: 'TB/s' },
  { name: 'petabits/sec', id: 'Pbits', format: 'Tb/s' },
  { name: 'Watt (W)', id: 'watt', format: 'W' },
  { name: 'Kilowatt (kW)', id: 'kwatt', format: 'W' },
  { name: 'Megawatt (MW)', id: 'megwatt', format: 'W' },
  { name: 'Gigawatt (GW)', id: 'gwatt', format: 'W' },
  { name: 'Milliwatt (mW)', id: 'mwatt', format: 'W' },
  { name: 'Watt per square meter (W/m²)', id: 'Wm2', format: 'W/m²' },
  { name: 'Volt-ampere (VA)', id: 'voltamp', format: 'VA' },
  { name: 'Kilovolt-ampere (kVA)', id: 'kvoltamp', format: 'VA' },
  { name: 'Volt-ampere reactive (var)', id: 'voltampreact', format: 'var' },
  {
    name: 'Kilovolt-ampere reactive (kvar)',
    id: 'kvoltampreact',
    format: 'var',
  },
  { name: 'Watt-hour (Wh)', id: 'watth', format: 'Wh' },
  { name: 'Watt-hour per Kilogram (Wh/kg)', id: 'watthperkg', format: 'Wh/kg' },
  { name: 'Kilowatt-hour (kWh)', id: 'kwatth', format: 'Wh' },
  { name: 'Kilowatt-min (kWm)', id: 'kwattm', format: 'W-Min' },
  { name: 'Ampere-hour (Ah)', id: 'amph', format: 'Ah' },
  { name: 'Kiloampere-hour (kAh)', id: 'kamph', format: 'Ah' },
  { name: 'Milliampere-hour (mAh)', id: 'mamph', format: 'Ah' },
  { name: 'Joule (J)', id: 'joule', format: 'J' },
  { name: 'Electron volt (eV)', id: 'ev', format: 'eV' },
  { name: 'Ampere (A)', id: 'amp', format: 'A' },
  { name: 'Kiloampere (kA)', id: 'kamp', format: 'A' },
  { name: 'Milliampere (mA)', id: 'mamp', format: 'A' },
  { name: 'Volt (V)', id: 'volt', format: 'V' },
  { name: 'Kilovolt (kV)', id: 'kvolt', format: 'V' },
  { name: 'Millivolt (mV)', id: 'mvolt', format: 'V' },
  { name: 'Decibel-milliwatt (dBm)', id: 'dBm', format: 'dBm' },
  { name: 'Ohm (Ω)', id: 'ohm', format: 'Ω' },
  { name: 'Kiloohm (kΩ)', id: 'kohm', format: 'Ω' },
  { name: 'Megaohm (MΩ)', id: 'Mohm', format: 'Ω' },
  { name: 'Farad (F)', id: 'farad', format: 'F' },
  { name: 'Microfarad (µF)', id: 'µfarad', format: 'F' },
  { name: 'Nanofarad (nF)', id: 'nfarad', format: 'F' },
  { name: 'Picofarad (pF)', id: 'pfarad', format: 'F' },
  { name: 'Femtofarad (fF)', id: 'ffarad', format: 'F' },
  { name: 'Henry (H)', id: 'henry', format: 'H' },
  { name: 'Millihenry (mH)', id: 'mhenry', format: 'H' },
  { name: 'Microhenry (µH)', id: 'µhenry', format: 'H' },
  { name: 'Lumens (Lm)', id: 'lumens', format: 'Lm' },
  { name: 'Gallons/min (gpm)', id: 'flowgpm', format: 'gpm' },
  { name: 'Cubic meters/sec (cms)', id: 'flowcms', format: 'cms' },
  { name: 'Cubic feet/sec (cfs)', id: 'flowcfs', format: 'cfs' },
  { name: 'Cubic feet/min (cfm)', id: 'flowcfm', format: 'cfm' },
  { name: 'Litre/hour', id: 'litreh', format: 'L/h' },
  { name: 'Litre/min (L/min)', id: 'flowlpm', format: 'L/min' },
  { name: 'milliLitre/min (mL/min)', id: 'flowmlpm', format: 'mL/min' },
  { name: 'Lux (lx)', id: 'lux', format: 'lux' },
  { name: 'Newton-meters (Nm)', id: 'forceNm', format: 'Nm' },
  { name: 'Kilonewton-meters (kNm)', id: 'forcekNm', format: 'Nm' },
  { name: 'Newtons (N)', id: 'forceN', format: 'N' },
  { name: 'Kilonewtons (kN)', id: 'forcekN', format: 'N' },
  { name: 'hashes/sec', id: 'Hs', format: 'H/s' },
  { name: 'kilohashes/sec', id: 'KHs', format: 'H/s' },
  { name: 'megahashes/sec', id: 'MHs', format: 'H/s' },
  { name: 'gigahashes/sec', id: 'GHs', format: 'H/s' },
  { name: 'terahashes/sec', id: 'THs', format: 'H/s' },
  { name: 'petahashes/sec', id: 'PHs', format: 'H/s' },
  { name: 'exahashes/sec', id: 'EHs', format: 'H/s' },
  { name: 'milligram (mg)', id: 'massmg', format: 'g' },
  { name: 'gram (g)', id: 'massg', format: 'g' },
  { name: 'kilogram (kg)', id: 'masskg', format: 'g' },
  { name: 'metric ton (t)', id: 'masst', format: 't' },
  { name: 'millimeter (mm)', id: 'lengthmm', format: 'm' },
  { name: 'feet (ft)', id: 'lengthft', format: 'ft' },
  { name: 'meter (m)', id: 'lengthm', format: 'm' },
  { name: 'kilometer (km)', id: 'lengthkm', format: 'm' },
  { name: 'mile (mi)', id: 'lengthmi', format: 'mi' },
  { name: 'Millibars', id: 'pressurembar', format: 'bar' },
  { name: 'Bars', id: 'pressurebar', format: 'bar' },
  { name: 'Kilobars', id: 'pressurekbar', format: 'bar' },
  { name: 'Pascals', id: 'pressurepa', format: 'Pa' },
  { name: 'Hectopascals', id: 'pressurehpa', format: 'hPa' },
  { name: 'Kilopascals', id: 'pressurekpa', format: 'kPa' },
  { name: 'Inches of mercury', id: 'pressurehg', format: '"Hg' },
  { name: 'Becquerel (Bq)', id: 'radbq', format: 'Bq' },
  { name: 'curie (Ci)', id: 'radci', format: 'Ci' },
  { name: 'Gray (Gy)', id: 'radgy', format: 'Gy' },
  { name: 'rad', id: 'radrad', format: 'rad' },
  { name: 'Sievert (Sv)', id: 'radsv', format: 'Sv' },
  { name: 'milliSievert (mSv)', id: 'radmsv', format: 'Sv' },
  { name: 'microSievert (µSv)', id: 'radusv', format: 'Sv' },
  { name: 'rem', id: 'radrem', format: 'rem' },
  { name: 'Exposure (C/kg)', id: 'radexpckg', format: 'C/kg' },
  { name: 'roentgen (R)', id: 'radr', format: 'R' },
  { name: 'Sievert/hour (Sv/h)', id: 'radsvh', format: 'Sv/h' },
  { name: 'milliSievert/hour (mSv/h)', id: 'radmsvh', format: 'Sv/h' },
  { name: 'microSievert/hour (µSv/h)', id: 'radusvh', format: 'Sv/h' },
  { name: 'Revolutions per minute (rpm)', id: 'rotrpm', format: 'rpm' },
  { name: 'Hertz (Hz)', id: 'rothz', format: 'Hz' },
  { name: 'Radians per second (rad/s)', id: 'rotrads', format: 'rad/s' },
  { name: 'Degrees per second (°/s)', id: 'rotdegs', format: '°/s' },
  { name: 'Celsius (°C)', id: 'celsius', format: '°C' },
  { name: 'Fahrenheit (°F)', id: 'fahrenheit', format: '°F' },
  { name: 'Kelvin (K)', id: 'kelvin', format: 'K' },
  { name: 'Hertz (1/s)', id: 'hertz', format: 'Hz' },
  { name: 'nanoseconds (ns)', id: 'ns', format: 'ns' },
  { name: 'microseconds (µs)', id: 'µs', format: 'µs' },
  { name: 'milliseconds (ms)', id: 'ms', format: 'ms' },
  { name: 'seconds (s)', id: 's', format: 's' },
  { name: 'minutes (m)', id: 'm', format: 'm' },
  { name: 'hours (h)', id: 'h', format: 'h' },
  { name: 'days (d)', id: 'd', format: 'd' },
  { name: 'duration (ms)', id: 'dtdurationms', format: 'ms' },
  { name: 'duration (s)', id: 'dtdurations', format: 's' },
  { name: 'duration (hh:mm:ss)', id: 'dthms', format: 'dthms' },
  { name: 'duration (d hh:mm:ss)', id: 'dtdhms', format: 'dtdhms' },
  { name: 'Timeticks (s/100)', id: 'timeticks', format: 'timeticks' },
  { name: 'clock (ms)', id: 'clockms', format: 'ms' },
  { name: 'clock (s)', id: 'clocks', format: 's' },
  { name: 'counts/sec (cps)', id: 'cps', format: 'c/s' },
  { name: 'ops/sec (ops)', id: 'ops', format: 'ops/s' },
  { name: 'requests/sec (rps)', id: 'reqps', format: 'req/s' },
  { name: 'reads/sec (rps)', id: 'rps', format: 'rd/s' },
  { name: 'writes/sec (wps)', id: 'wps', format: 'wr/s' },
  { name: 'I/O ops/sec (iops)', id: 'iops', format: 'io/s' },
  { name: 'counts/min (cpm)', id: 'cpm', format: 'c/m' },
  { name: 'ops/min (opm)', id: 'opm', format: 'ops/m' },
  { name: 'reads/min (rpm)', id: 'rpm', format: 'rd/m' },
  { name: 'writes/min (wpm)', id: 'wpm', format: 'wr/m' },
  { name: 'meters/second (m/s)', id: 'velocityms', format: 'm/s' },
  { name: 'kilometers/hour (km/h)', id: 'velocitykmh', format: 'km/h' },
  { name: 'miles/hour (mph)', id: 'velocitymph', format: 'mph' },
  { name: 'knot (kn)', id: 'velocityknot', format: 'kn' },
  { name: 'millilitre (mL)', id: 'mlitre', format: 'L' },
  { name: 'litre (L)', id: 'litre', format: 'L' },
  { name: 'cubic meter', id: 'm3', format: 'm³' },
  { name: 'Normal cubic meter', id: 'Nm3', format: 'Nm³' },
  { name: 'cubic decimeter', id: 'dm3', format: 'dm³' },
  { name: 'gallons', id: 'gallons', format: 'gal' },
];

export const getUnit = (id) => {
  if (id === undefined) {
    return { name: '', id: '', format: '' };
  } else {
    const unit = units.find((item) => item.id === id);
    return unit || { name: id, id: id, format: id };
  }
};
